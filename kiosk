#!/bin/bash
set -e

# =====================================
# Configuration
# =====================================

KIOSK_FALLBACK_PORT=8000
KIOSK_FALLBACK_PAGE="http://google.com"

KIOSK_CONFIG_DIR=~/.kiosk

KIOSK_PYTHON_LOG="$KIOSK_CONFIG_DIR/python.log"
KIOSK_CHROME_LOG="$KIOSK_CONFIG_DIR/chrome.log"
KIOSK_MIDORI_LOG="$KIOSK_CONFIG_DIR/midori.log"

KIOSK_PYTHON_PID="$KIOSK_CONFIG_DIR/python.pid"
KIOSK_MIDORI_PID="$KIOSK_CONFIG_DIR/midori.pid"

KIOSK_CONFIG_PORT="$KIOSK_CONFIG_DIR/config-port"
KIOSK_CONFIG_PAGE="$KIOSK_CONFIG_DIR/config-page"
KIOSK_CONFIG_LAST="$KIOSK_CONFIG_DIR/config-last"
KIOSK_CONFIG_AUTH="$KIOSK_CONFIG_DIR/config-auth"
KIOSK_CONFIG_PAGE_TEMP="$KIOSK_CONFIG_DIR/config-temp"
KIOSK_CONFIG_BROWSER="$KIOSK_CONFIG_DIR/config-browser"

# =====================================
# Functions
# =====================================

function check_dependencies {
  local STATUS=0
  command -v chromium-browser >/dev/null 2>&1 || {
    >&2 echo "Missing chromium-browser: sudo apt-get install chromium-browser"
    STATUS=1;
  }
  command -v midori >/dev/null 2>&1 || {
    >&2 echo "Missing midori: sudo apt-get install midori"
    STATUS=1;
  }
  command -v python3 >/dev/null 2>&1 || {
    >&2 echo "Missing python3: sudo apt-get install python3";
    STATUS=1;
  }
  return $STATUS
}

function initialize {
  export DISPLAY=:0

  mkdir -p $KIOSK_CONFIG_DIR

  xset s off
  xset -dpms
  xset s noblank

  touch $KIOSK_PYTHON_LOG $KIOSK_CHROME_LOG $KIOSK_PYTHON_PID \
        $KIOSK_CONFIG_PORT $KIOSK_CONFIG_PAGE $KIOSK_CONFIG_LAST \
        $KIOSK_CONFIG_PAGE_TEMP $KIOSK_CONFIG_AUTH $KIOSK_MIDORI_LOG \
        $KIOSK_MIDORI_PID $KIOSK_CONFIG_BROWSER

  if ! check_dependencies; then
    echo "Please install the missing dependencies"
    exit 1
  fi
}

function set_page {
  if [ -z "$1" ]; then
    echo "No page specified"
    exit 1
  fi
  echo "$1" > $KIOSK_CONFIG_PAGE
}

function set_temp_page {
  if [ -z "$1" ]; then
    >&2 echo "No page specified"
    exit 1
  fi
  echo "$1" > $KIOSK_CONFIG_PAGE_TEMP
}

function set_port {
  if ! [[ "$1" =~ ^[0-9]+$ ]]; then
    >&2 echo "No valid port specified"
    exit 1
  fi
  echo "$1" > $KIOSK_CONFIG_PORT
}

function set_auth {
  echo "$1" > $KIOSK_CONFIG_AUTH
}

function set_browser {
  if [[ "$1" == "chromium" ]] || [[ "$1" == "midori" ]] ; then
    echo "$1" > $KIOSK_CONFIG_BROWSER
  else
    >&2 echo "Not a valid browser"
    exit 1
  fi
}

function get_port {
  KIOSK_PORT=$(<$KIOSK_CONFIG_PORT)
  if [ -z "$KIOSK_PORT" ]; then
    KIOSK_PORT=$KIOSK_FALLBACK_PORT
  fi
}

function get_auth {
  KIOSK_AUTH=$(<$KIOSK_CONFIG_AUTH)
  if [ -z "$KIOSK_AUTH" ]; then
    KIOSK_AUTH=""
  fi
}

function get_browser {
  KIOSK_BROWSER=$(<$KIOSK_CONFIG_BROWSER)
  if [ "$KIOSK_BROWSER" != "midori" ]; then
    KIOSK_BROWSER="chromium"
  fi
}

function get_page {
  KIOSK_PAGE=$(<$KIOSK_CONFIG_PAGE_TEMP)
  echo "" > $KIOSK_CONFIG_PAGE_TEMP
  if [ -z "$KIOSK_PAGE" ]; then
    KIOSK_PAGE=$(<$KIOSK_CONFIG_PAGE)
  fi
  if [ -z "$KIOSK_PAGE" ]; then
    KIOSK_PAGE=$KIOSK_FALLBACK_PAGE
  fi
  echo $KIOSK_PAGE > $KIOSK_CONFIG_LAST
}

function start_chromium {
  get_page
  nohup chromium-browser --incognito \
        --disable-session-crashed-bubble --disable-restore-session-state \
        --disable-infobars --disable-sync --disable-translate \
        --kiosk "$KIOSK_PAGE" \
        >$KIOSK_CHROME_LOG 2>&1 &
  echo "  [Chromium] Started with URL $KIOSK_PAGE"
}

function start_midori {
  get_page
  nohup midori -p -e Fullscreen -a "$KIOSK_PAGE" \
        >$KIOSK_MIDORI_LOG 2>&1 &
  echo $! > $KIOSK_MIDORI_PID
  echo "    [Midori] Started with URL $KIOSK_PAGE"
}

function start_browser {
  get_browser
  if [[ "$KIOSK_BROWSER" = "midori" ]]; then
    start_midori
  else
    start_chromium
  fi
}

function start_python_api {
  get_port
  get_auth
  if [[ "$KIOSK_PORT" = "0" ]]; then
    echo "[Python API] Offline because port=0"
    return
  fi
  nohup python3 -u kiosk-http-api.py $0 $KIOSK_PORT $KIOSK_CONFIG_LAST \
                $KIOSK_CONFIG_PAGE $KIOSK_CONFIG_PAGE_TEMP $KIOSK_AUTH \
        >$KIOSK_PYTHON_LOG 2>&1 &
  echo $! > $KIOSK_PYTHON_PID
  echo "[Python API] Starting at PID $! on port $KIOSK_PORT"
}

function stop_chromium {
  (pkill chromium && \
  echo "  [Chromium] Stopping existing chromium instances") || true
}

function stop_midori {
  local PID=$(<$KIOSK_MIDORI_PID)
  if ps -p $PID 2> /dev/null | grep -q "midori"; then
    echo "    [Midori] Stopping at PID $PID."
    kill $PID
  fi
}

function stop_browser {
  get_browser
  if [[ "$KIOSK_BROWSER" = "midori" ]]; then
    stop_midori
  else
    stop_chromium
  fi
}

function stop_python_api {
  local PID=$(<$KIOSK_PYTHON_PID)
  if ps -p $PID 2> /dev/null | grep -q "python"; then
    echo "[Python API] Stopping at PID $PID."
    kill $PID
  fi
}

function usage {
  echo "Usage: kiosk <command> [<args>]"
  echo "Controls a Chromium kiosk mode instance"
  echo "For details on the HTTP API this exposes, consult the README"
  echo
  echo "  api               (re)starts just the API"
  echo "  auth <pass>       changes the API password; leave blank for none"
  echo "  browser <name>    changes the browser that will be used"
  echo "  browser           (re)starts just the browser"
  echo "  help              prints this help"
  echo "  page <url>        sets the default page"
  echo "  port <number>     sets the default API port; 0 to disable API"
  echo "  start             (re)starts the API server and browser"
  echo "  start <url>       one-time (re)start with the specified url"
  echo "  stop              stops the API server and browser"
}

# =====================================
# Initialization
# =====================================

initialize

if [ "$1" == "api" ]; then
  stop_python_api
  start_python_api
elif [ "$1" == "auth" ]; then
  set_auth "$2"
elif [ "$1" == "browser" ]; then
  if [ -n "$2" ]; then
    set_browser "$2"
  else
    stop_browser
    start_browser
  fi
elif [ "$1" == "page" ]; then
  set_page "$2"
elif [ "$1" == "port" ]; then
  set_port "$2"
elif [ "$1" == "start" ]; then
  stop_browser
  stop_python_api
  if [ -n "$2" ]; then
    set_temp_page "$2"
  fi
  start_browser
  start_python_api
elif [ "$1" == "stop" ]; then
  stop_browser
  stop_python_api
else
  usage
fi
